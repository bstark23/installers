#+----------------------------------------------------------------------------+
#+ By implementing FastCGI Caching, you can greatly speed up reponse time
#+ by serving "stale" content.
#+
#+ FastCGI Caching can be enabled on multiple sites with only three simple
#+ changes.
#+
#+ 1). Change domain.com to match your domain.
#+ 2). Change APPKEY to a key name of your choice (i.e. APP2KEY, etc).
#+ 3). Find fastcgi_cache APPKEY; and change APPKEY to your new key.
#+
#+ The restart NGINX using:
#+
#+ systemctl restart nginx
#+----------------------------------------------------------------------------+
fastcgi_cache_path /etc/nginx/cache/fastcgi/capefearlivingmagazine.com levels=1:2 keys_zone=APPKEY:100m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";
fastcgi_cache_use_stale error timeout invalid_header http_500;
fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

server
{
	listen 80 default_server;
    listen [::]:80 default_server;
	listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name capefearlivingmagazine.com www.capefearlivingmagazine.com;

    include /etc/nginx/config/sites/headers.conf;

    include /etc/nginx/config/ssl/resolver.conf;
	ssl on;
    ssl_certificate /etc/letsencrypt/live/capefearlivingmagazine.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/capefearlivingmagazine.com/privkey.pem;

    root /home/nginx/htdocs/public;

    set $skip_cache 0;
	
	include /etc/nginx/config/ssl/ssl.conf;
    # POST requests and urls with a query string should always go to PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }

    if ($query_string != "") {
        set $skip_cache 1;
    }

    # Don't cache uris containing the following segments
    if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }

    # Don't use the cache for logged in users or recent commenters
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }

    #+------------------------------------------------------------------------+
    #+ This location block is currently setup to work with most CMS's -- such
    #+ as WordPress. If this doesn't work for your CMS, generally you'll only
    #+ need to change $args. Your CMS should be able to provide details as to
    #+ what you need to swap it to.
    #+------------------------------------------------------------------------+

    location /
    {
        try_files $uri $uri/ /index.php?$args;
    }
	
	location ~ /.well-known {
                allow all;
    }

    #+------------------------------------------------------------------------+
    #+ By default, when PHP is installed using a package manager, sockets are
    #+ used instead of TCP. If you wish to use TCP connections, you'll need to
    #+ modify your pool.d configuration file which can generally be found in:
    #+
    #+ /etc/php/-version-/fpm/pool.d
    #+
    #+ Where -version- is your active PHP version (i.e. 5.6, 7.0, 7.1, etc).
    #+ You'll need to find this line (version dependent):
    #+
    #+ listen = /run/php/php7.1-fpm.sock
    #+
    #+ and change it to:
    #+
    #+ listen = 127.0.0.1:9000
    #+
    #+ You'll then need to save the file and restart php-fpm. Alternatively,
    #+ you can chance fastcgi_pass 127.0.0.1:9000; to:
    #+
    #+ fastcgi_pass unix:/run/php/php7.1-fpm.sock
    #+------------------------------------------------------------------------+

    location ~ [^/]\.php(/|$) {
        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        fastcgi_pass unix:/run/php/php7.1-fpm.sock;
        fastcgi_index index.php;
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
        fastcgi_cache APPKEY;
        fastcgi_cache_valid 200 60m;

        include /etc/nginx/config/php/fastcgi_params;
    }

    include /etc/nginx/config/cache/static.conf;
}
